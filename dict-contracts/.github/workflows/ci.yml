name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Proto Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Buf lint
        run: buf lint

      - name: Buf breaking (against main)
        if: github.ref != 'refs/heads/main'
        run: buf breaking --against '.git#branch=main'

  generate:
    name: Generate Go Code
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Go protoc plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate Go code
        run: make proto-gen

      - name: Verify generated code
        run: |
          if [ -z "$(ls -A gen)" ]; then
            echo "Error: No code generated in gen/ directory"
            exit 1
          fi
          echo "Generated files:"
          ls -la gen/

      - name: Upload generated code
        uses: actions/upload-artifact@v4
        with:
          name: generated-code
          path: gen/
          retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: generate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Download generated code
        uses: actions/download-artifact@v4
        with:
          name: generated-code
          path: gen/

      - name: Run tests
        run: |
          if [ -d "test" ] || grep -r "func Test" . --include="*_test.go" 2>/dev/null; then
            go test -v -race -coverprofile=coverage.out ./...
          else
            echo "No tests found, skipping test execution"
          fi

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [lint, generate, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Go protoc plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate Go code
        run: make proto-gen

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            gen/**/*.go
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Buf Schema Registry
        if: env.BUF_TOKEN != ''
        run: |
          buf push
        env:
          BUF_TOKEN: ${{ secrets.BUF_TOKEN }}

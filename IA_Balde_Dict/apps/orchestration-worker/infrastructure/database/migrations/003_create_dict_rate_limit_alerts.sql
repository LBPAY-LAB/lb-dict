-- +goose Up
-- +goose StatementBegin
-- Table: dict_rate_limit_alerts
-- Purpose: Store history of rate limit threshold violation alerts
-- Source: Generated by Temporal workflow when thresholds (20% or 10%) are breached
-- Retention: Indefinite (alerts are important audit trail)

CREATE TABLE IF NOT EXISTS dict_rate_limit_alerts (
    -- Primary key
    id BIGSERIAL PRIMARY KEY,

    -- Foreign key to policy
    endpoint_id VARCHAR(100) NOT NULL,

    -- Alert severity and threshold
    severity VARCHAR(10) NOT NULL CHECK (severity IN ('WARNING', 'CRITICAL')),
    threshold_percent INTEGER NOT NULL CHECK (threshold_percent IN (10, 20)),

    -- Token bucket state at alert time
    available_tokens INTEGER NOT NULL CHECK (available_tokens >= 0),
    capacity INTEGER NOT NULL CHECK (capacity > 0),
    utilization_percent DECIMAL(5,2) NOT NULL CHECK (utilization_percent >= 0 AND utilization_percent <= 100),

    -- Calculated metrics at alert time
    consumption_rate_per_minute DECIMAL(10,2) CHECK (consumption_rate_per_minute >= 0),
    recovery_eta_seconds INTEGER CHECK (recovery_eta_seconds >= 0),
    exhaustion_projection_seconds INTEGER,
    psp_category VARCHAR(2) CHECK (psp_category ~ '^[A-H]$'),

    -- Alert message
    message TEXT NOT NULL,

    -- Alert resolution tracking
    resolved BOOLEAN NOT NULL DEFAULT FALSE,
    resolved_at TIMESTAMPTZ,
    resolution_notes TEXT,

    -- Timestamps (UTC enforced)
    created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'UTC'),

    -- Constraints
    CONSTRAINT valid_resolution CHECK (
        (resolved = FALSE AND resolved_at IS NULL) OR
        (resolved = TRUE AND resolved_at IS NOT NULL)
    ),

    -- Business rule: WARNING at 20%, CRITICAL at 10%
    CONSTRAINT valid_severity_threshold CHECK (
        (severity = 'WARNING' AND threshold_percent = 20 AND utilization_percent >= 80) OR
        (severity = 'CRITICAL' AND threshold_percent = 10 AND utilization_percent >= 90)
    )
);

-- Foreign key to policies table
ALTER TABLE dict_rate_limit_alerts
    ADD CONSTRAINT fk_alert_policy
    FOREIGN KEY (endpoint_id)
    REFERENCES dict_rate_limit_policies(endpoint_id)
    ON DELETE CASCADE;

-- Index for queries by severity and unresolved alerts
CREATE INDEX idx_alerts_severity_unresolved ON dict_rate_limit_alerts(severity, created_at DESC) WHERE NOT resolved;

-- Index for queries by endpoint
CREATE INDEX idx_alerts_endpoint_time ON dict_rate_limit_alerts(endpoint_id, created_at DESC);

-- Index for queries by creation time (recent alerts)
CREATE INDEX idx_alerts_created_at ON dict_rate_limit_alerts(created_at DESC);

-- Index for queries by PSP category
CREATE INDEX idx_alerts_category ON dict_rate_limit_alerts(psp_category, created_at DESC) WHERE psp_category IS NOT NULL;

-- Table comments
COMMENT ON TABLE dict_rate_limit_alerts IS 'Alert history for DICT rate limit threshold violations';
COMMENT ON COLUMN dict_rate_limit_alerts.severity IS 'WARNING (≤20% remaining) or CRITICAL (≤10% remaining)';
COMMENT ON COLUMN dict_rate_limit_alerts.threshold_percent IS 'Threshold percentage that triggered alert (10 or 20)';
COMMENT ON COLUMN dict_rate_limit_alerts.utilization_percent IS 'Percentage of capacity utilized at alert time';
COMMENT ON COLUMN dict_rate_limit_alerts.resolved IS 'Whether this alert has been resolved (tokens recovered above threshold)';
COMMENT ON COLUMN dict_rate_limit_alerts.resolved_at IS 'Timestamp when alert was resolved';

-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
DROP TABLE IF EXISTS dict_rate_limit_alerts;
-- +goose StatementEnd
